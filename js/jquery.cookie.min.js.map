{"version":3,"sources":["jquery.cookie.js"],"names":["jQuery","cookie","name","value","options","cookieValue","document","cookies","split","i","length","trim","substring","decodeURIComponent","expires","date","toUTCString","Date","setTime","getTime","path","domain","secure","encodeURIComponent","join"],"mappings":"AAuDAA,OAAOC,OAAS,SAASC,EAAMC,EAAOC,GAClC,QAAoB,IAATD,EAwBJ,CACH,IAAIE,EAAc,KAClB,GAAIC,SAASL,QAA6B,IAAnBK,SAASL,OAE5B,IADA,IAAIM,EAAUD,SAASL,OAAOO,MAAM,KAC3BC,EAAI,EAAGA,EAAIF,EAAQG,OAAQD,IAAK,CACrC,IAAIR,EAASD,OAAOW,KAAKJ,EAAQE,IAEjC,GAAIR,EAAOW,UAAU,EAAGV,EAAKQ,OAAS,IAAOR,EAAO,IAAM,CACtDG,EAAcQ,mBAAmBZ,EAAOW,UAAUV,EAAKQ,OAAS,IAChE,OAIZ,OAAOL,EApCPD,EAAUA,GAAW,GACP,OAAVD,IACAA,EAAQ,GACRC,EAAQU,SAAW,GAEvB,IAEQC,EAFJD,EAAU,GACVV,EAAQU,UAAsC,iBAAnBV,EAAQU,SAAuBV,EAAQU,QAAQE,eAE5C,iBAAnBZ,EAAQU,SACfC,EAAO,IAAIE,MACNC,QAAQH,EAAKI,UAA+B,GAAlBf,EAAQU,QAAe,GAAK,GAAK,KAEhEC,EAAOX,EAAQU,QAEnBA,EAAU,aAAeC,EAAKC,eAKlC,IAAII,EAAOhB,EAAQgB,KAAO,UAAahB,EAAY,KAAI,GACnDiB,EAASjB,EAAQiB,OAAS,YAAejB,EAAc,OAAI,GAC3DkB,EAASlB,EAAQkB,OAAS,WAAa,GAC3ChB,SAASL,OAAS,CAACC,EAAM,IAAKqB,mBAAmBpB,GAAQW,EAASM,EAAMC,EAAQC,GAAQE,KAAK","file":"jquery.cookie.min.js","sourcesContent":["/**\r\n * Cookie plugin\r\n *\r\n * Copyright (c) 2006 Klaus Hartl (stilbuero.de)\r\n * Dual licensed under the MIT and GPL licenses:\r\n * http://www.opensource.org/licenses/mit-license.php\r\n * http://www.gnu.org/licenses/gpl.html\r\n *\r\n */\r\n\r\n/**\r\n * Create a cookie with the given name and value and other optional parameters.\r\n *\r\n * @example $.cookie('the_cookie', 'the_value');\r\n * @desc Set the value of a cookie.\r\n * @example $.cookie('the_cookie', 'the_value', { expires: 7, path: '/', domain: 'jquery.com', secure: true });\r\n * @desc Create a cookie with all available options.\r\n * @example $.cookie('the_cookie', 'the_value');\r\n * @desc Create a session cookie.\r\n * @example $.cookie('the_cookie', null);\r\n * @desc Delete a cookie by passing null as value. Keep in mind that you have to use the same path and domain\r\n *       used when the cookie was set.\r\n *\r\n * @param String name The name of the cookie.\r\n * @param String value The value of the cookie.\r\n * @param Object options An object literal containing key/value pairs to provide optional cookie attributes.\r\n * @option Number|Date expires Either an integer specifying the expiration date from now on in days or a Date object.\r\n *                             If a negative value is specified (e.g. a date in the past), the cookie will be deleted.\r\n *                             If set to null or omitted, the cookie will be a session cookie and will not be retained\r\n *                             when the the browser exits.\r\n * @option String path The value of the path atribute of the cookie (default: path of page that created the cookie).\r\n * @option String domain The value of the domain attribute of the cookie (default: domain of page that created the cookie).\r\n * @option Boolean secure If true, the secure attribute of the cookie will be set and the cookie transmission will\r\n *                        require a secure protocol (like HTTPS).\r\n * @type undefined\r\n *\r\n * @name $.cookie\r\n * @cat Plugins/Cookie\r\n * @author Klaus Hartl/klaus.hartl@stilbuero.de\r\n */\r\n\r\n/**\r\n * Get the value of a cookie with the given name.\r\n *\r\n * @example $.cookie('the_cookie');\r\n * @desc Get the value of a cookie.\r\n *\r\n * @param String name The name of the cookie.\r\n * @return The value of the cookie.\r\n * @type String\r\n *\r\n * @name $.cookie\r\n * @cat Plugins/Cookie\r\n * @author Klaus Hartl/klaus.hartl@stilbuero.de\r\n */\r\njQuery.cookie = function(name, value, options) {\r\n    if (typeof value != 'undefined') { // name and value given, set cookie\r\n        options = options || {};\r\n        if (value === null) {\r\n            value = '';\r\n            options.expires = -1;\r\n        }\r\n        var expires = '';\r\n        if (options.expires && (typeof options.expires == 'number' || options.expires.toUTCString)) {\r\n            var date;\r\n            if (typeof options.expires == 'number') {\r\n                date = new Date();\r\n                date.setTime(date.getTime() + (options.expires * 24 * 60 * 60 * 1000));\r\n            } else {\r\n                date = options.expires;\r\n            }\r\n            expires = '; expires=' + date.toUTCString(); // use expires attribute, max-age is not supported by IE\r\n        }\r\n        // CAUTION: Needed to parenthesize options.path and options.domain\r\n        // in the following expressions, otherwise they evaluate to undefined\r\n        // in the packed version for some reason...\r\n        var path = options.path ? '; path=' + (options.path) : '';\r\n        var domain = options.domain ? '; domain=' + (options.domain) : '';\r\n        var secure = options.secure ? '; secure' : '';\r\n        document.cookie = [name, '=', encodeURIComponent(value), expires, path, domain, secure].join('');\r\n    } else { // only name given, get cookie\r\n        var cookieValue = null;\r\n        if (document.cookie && document.cookie != '') {\r\n            var cookies = document.cookie.split(';');\r\n            for (var i = 0; i < cookies.length; i++) {\r\n                var cookie = jQuery.trim(cookies[i]);\r\n                // Does this cookie string begin with the name we want?\r\n                if (cookie.substring(0, name.length + 1) == (name + '=')) {\r\n                    cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return cookieValue;\r\n    }\r\n};"]}